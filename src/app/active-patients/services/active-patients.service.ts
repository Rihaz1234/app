import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { BehaviorSubject, Observable, of, throwError } from "rxjs";
import { catchError, map } from "rxjs/operators";
import { LSTableConfig } from "src/app/life-signals/_models/ls-column.model";
import { Group } from "src/app/manage-group/models/manage-groups.model";
import { ManageGroupsService } from "src/app/manage-group/services/manage-groups.service";
import { environment } from "src/environments/environment";
import {
  ActivePatient,
  DOCTORS,
  NewPatient,
  UnassignedPatient,
} from "../models/active-patients.model";
import { BackendApiService } from "@services/backendapi.service";
import { Patient } from "src/app/shared/shared.interface";

@Injectable()
export class ActivePatientsService {
  BASE_URL: string = environment.dataApiUrl;
  http: HttpClient
  constructor(
    private manageGroupService: ManageGroupsService,
    private backendApiService: BackendApiService) {
    this.http = backendApiService.httpClient;
  }
  getAll(url) {
    if (url) {
      let apiURL = `${this.BASE_URL}${url}`;
      return this.http
        .get<ActivePatient[]>(apiURL)
        .pipe(catchError(this.handleError));
    } else {
      return of(null);
    }
  }

  savePatient(data) {
    let url = this.BASE_URL + "patients/";
    return this.http
      .post<NewPatient>(url, data.payload)
      .pipe(catchError(this.handleError));
  }

  updatePatient(obj) {
    let url = this.BASE_URL + "patients/";
    return this.http
      .put<{ data: NewPatient }>(url, obj.payload)
      .pipe(catchError(this.handleError));
  }
  getAutogeneratedPatientId() {
    let url = this.BASE_URL + 'patients/generate-id';
    return this.http.post(url, '').pipe(catchError(this.handleError));
  }

  stopProcedure(patientId) {
    let url = this.BASE_URL + `patients/${patientId}/stop-procedure`;
    return this.http
      .post<NewPatient>(url, "")
      .pipe(catchError(this.handleError));
  }

  dischargePatient(patientId) {
    patientId = encodeURIComponent(patientId);
    let url = this.BASE_URL + `patients/${patientId}/discharge`;
    return this.http
      .post<NewPatient>(url, "")
      .pipe(catchError(this.handleError));
  }

  getDoctorsList() {
    let url = this.BASE_URL + "clinical-facilities/physicians?size=2000";
    return this.http.get<DOCTORS[]>(url).pipe(catchError(this.handleError));
  }

  getDoctorBy(id) {
    let url = this.BASE_URL + "clinical-facilities/physicians?Id=" + id;
    return this.http.get<any>(url).pipe(catchError(this.handleError));
  }

  handleError(error: any) {
    if (error.errorMessage) {
      return throwError(error.errorMessage);
    } else {
      return throwError(`Error: ${error}`);
    }
  }

  setSelectedPatientIds(ids: string[]) {
    return of(ids);
  }

  setSelectedTab(tab: string) {
    return of(tab);
  }

  getUnassignedPatients(url) {
    if (url) {
      let apiURL = `${this.BASE_URL}${url}`;
      return this.http
        .get<UnassignedPatient[]>(apiURL)
        .pipe(catchError(this.handleError));
    } else {
      return of(undefined);
    }
  }

  getPatientBy(id) {
    id = encodeURIComponent(id);
    let apiURL = `${this.BASE_URL}patients/${id}`;
    return this.http
      .get<{ data: ActivePatient }>(apiURL)
      .pipe(catchError(this.handleError));
  }

  private cGroup$: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);
  groups$: Observable<any[]> = this.cGroup$.asObservable();

  getCGroups(): Observable<Group[]> {
    if (this.cGroup$.getValue()) {
      return this.cGroup$.asObservable();
    } else {
      return this.manageGroupService.fetch()
        .pipe(map(groups => {
          if (groups['data']?.length > 0) {
            this.cGroup$.next(groups['data']);
          }
          return groups['data'] || [];
        }));
    }
  }

  unassignedPatientsUrl(config: LSTableConfig, searchObject) {
    return `patches/unassigned?&page=${config.page.pageIndex + 1}&size=${config.page.pageSize}&${searchObject?.keyword?.toLowerCase()}=${searchObject?.string}`;
  }

  actvePatientsUrl(config: LSTableConfig, searchObject, filterObject) {
    let searchString = encodeURIComponent(searchObject.string)
    let url = `patients/?sortBy=${config.sort.active}:${config.sort.direction}&isDischarged=false&page=${config.page.pageIndex + 1}&size=${config.page.pageSize}`;
    if(searchObject?.keyword && searchString) {
    url = url + `&${searchObject?.keyword?.toLowerCase()}=${searchString}`;
    }
    if(filterObject?.cGroupId) {
      url = url + `&cGroupId=${filterObject?.cGroupId}`;
    }
    if(filterObject?.pGroupId) {
      url = url + `&pGroupId=${filterObject?.pGroupId}`;
    }
    return url;
  }

  getClinicalGroups(location: string) {
    return this.groups$.pipe(map((groups: any[]) => {
      return groups.filter(g => g.type === location);
    }));
  }

  assignGroup(ob) {
    let url = this.BASE_URL + "patients/assign-group";
    return this.http.post<Group>(url, ob.payload).pipe(catchError(this.handleError));
  }
  getPanelDetails(panelId: string): Promise<Array<Patient>> {
    return new Promise((resolve, reject) => {
      const apiUrl = this.BASE_URL + 'dashboard/panels/';
      this.backendApiService.getMapping(apiUrl + panelId)
        .then(response => {
          const data = response?.data?.patients;
          if (data) {
            const patientsArr = data.map((patient) => ({
              patchId: patient?.patchId,
              patientId: patient?.patientId,
              doctorId: patient?.doctorId,
              firstName: patient?.firstName,
              lastName: patient?.lastName,
              age: patient?.age,
              cGroup: patient?.cGroup,
              pGroup: patient?.pGroup,
              sex: patient?.gender,
              created: new Date(patient?.stTime * 1000)
            }));
            resolve(patientsArr);
          }
        }).catch(reject);
    });
  }
  generateAdmissionId() {
    let url = this.BASE_URL + "patients/admissions/generate-id";
    return this.http.post(url, "").pipe(catchError(this.handleError));
  }
  searchPatient(id) {
      id = encodeURIComponent(id);
      let apiURL = this.BASE_URL + `patients/details/search?page=1&size=5&sortBy=PatientID:desc&PatientID=${id}`;
      return this.http
          .get(apiURL)
          .pipe(catchError(this.handleError));
  }
  stopMonitoringUnassigned(patchIds) {
    let url = this.BASE_URL + `patches/stop-procedure/bulk`;
    let body = {
      "patchIdList":patchIds
    }
    return this.http
        .post<NewPatient>(url, body)
        .pipe(catchError(this.handleError));
  }
  deletePatch(patchId) {
    let url = this.BASE_URL + `patches/unassigned/${patchId}`;
    return this.http.delete<any>(url).pipe(catchError(this.handleError));
  }
  transferRelay(patchId) {
    let url = this.BASE_URL + `patients/relay-transfer/${patchId}`;
    return this.http
        .post<NewPatient>(url, {})
        .pipe(catchError(this.handleError));
  }
}


