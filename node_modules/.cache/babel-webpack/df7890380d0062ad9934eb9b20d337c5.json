{"ast":null,"code":"import _asyncToGenerator from \"/home/probeplus/Projects/XVue/XVue-main/app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { KeycloakAuthGuard } from \"keycloak-angular\";\nimport { UserRoles } from \"../enum/roles.enum\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nimport * as i3 from \"@services/authentication.service\";\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(router, keycloak, authService) {\n    super(router, keycloak);\n    this.router = router;\n    this.keycloak = keycloak;\n    this.authService = authService;\n  }\n\n  isAccessAllowed(route, state) {\n    var _this = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resolve, reject) {\n        if (!_this.authenticated) {\n          _this.keycloak.login({\n            redirectUri: window.location.origin + state.url\n          }).then();\n\n          resolve(false);\n          return;\n        }\n\n        const requiredRoles = route.data.roles;\n        let granted = false;\n\n        if (!requiredRoles || requiredRoles.length === 0) {\n          granted = true;\n        } else {\n          console.log(requiredRoles);\n\n          for (const requiredRole of requiredRoles) {\n            if (_this.authService.getRoles().indexOf(requiredRole) > -1) {\n              granted = true;\n              break;\n            }\n          }\n        } //if required roles are not met, based on current role route to their landing page\n\n\n        if (granted === false) {\n          if (_this.authService.getRoles().indexOf(UserRoles.SUPER_ADMIN) > -1) {\n            _this.router.navigate([\"/super-admin\"]).then();\n          } else if (_this.authService.getRoles().indexOf(UserRoles.SERVICE_PROVIDER_ADMIN) > -1 || _this.authService.getRoles().indexOf(UserRoles.SERVICE_PROVIDER_ADMIN_CLONE) > -1) {\n            _this.router.navigate([\"/service-provider-admin/clinical-facility-management\"]).then();\n          } else if (_this.authService.getRoles().indexOf(UserRoles.CLINICAL_FACILITY_ADMIN) > -1 || _this.authService.getRoles().indexOf(UserRoles.CLINICAL_FACILITY_ADMIN_CLONE) > -1 || _this.authService.getRoles().indexOf(UserRoles.SUPERVISORY_CLINICIAN) > -1 || _this.authService.getRoles().indexOf(UserRoles.GENERAL_CLINICIAN) > -1 || _this.authService.getRoles().indexOf(UserRoles.PHYSICIAN) > -1) {\n            _this.router.navigate([\"/summary\"]).then();\n          }\n        }\n\n        resolve(granted);\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // if (!this.authenticated) {\n    //     await this.keycloak.login({\n    //         redirectUri: window.location.origin + state.url,\n    //     });\n    // }\n    //\n    // return this.authenticated;\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService), i0.ɵɵinject(i3.AuthenticationService));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/home/probeplus/Projects/XVue/XVue-main/app/src/app/guards/auth.guard.ts"],"names":["KeycloakAuthGuard","UserRoles","i0","i1","i2","i3","AuthGuard","constructor","router","keycloak","authService","isAccessAllowed","route","state","Promise","resolve","reject","authenticated","login","redirectUri","window","location","origin","url","then","requiredRoles","data","roles","granted","length","console","log","requiredRole","getRoles","indexOf","SUPER_ADMIN","navigate","SERVICE_PROVIDER_ADMIN","SERVICE_PROVIDER_ADMIN_CLONE","CLINICAL_FACILITY_ADMIN","CLINICAL_FACILITY_ADMIN_CLONE","SUPERVISORY_CLINICIAN","GENERAL_CLINICIAN","PHYSICIAN","ɵfac","AuthGuard_Factory","t","ɵɵinject","Router","KeycloakService","AuthenticationService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { KeycloakAuthGuard } from \"keycloak-angular\";\nimport { UserRoles } from \"../enum/roles.enum\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nimport * as i3 from \"@services/authentication.service\";\nexport class AuthGuard extends KeycloakAuthGuard {\n    constructor(router, keycloak, authService) {\n        super(router, keycloak);\n        this.router = router;\n        this.keycloak = keycloak;\n        this.authService = authService;\n    }\n    isAccessAllowed(route, state) {\n        return new Promise(async (resolve, reject) => {\n            if (!this.authenticated) {\n                this.keycloak\n                    .login({\n                    redirectUri: window.location.origin + state.url,\n                })\n                    .then();\n                resolve(false);\n                return;\n            }\n            const requiredRoles = route.data.roles;\n            let granted = false;\n            if (!requiredRoles || requiredRoles.length === 0) {\n                granted = true;\n            }\n            else {\n                console.log(requiredRoles);\n                for (const requiredRole of requiredRoles) {\n                    if (this.authService.getRoles().indexOf(requiredRole) > -1) {\n                        granted = true;\n                        break;\n                    }\n                }\n            }\n            //if required roles are not met, based on current role route to their landing page\n            if (granted === false) {\n                if (this.authService.getRoles().indexOf(UserRoles.SUPER_ADMIN) > -1) {\n                    this.router.navigate([\"/super-admin\"]).then();\n                }\n                else if ((this.authService.getRoles().indexOf(UserRoles.SERVICE_PROVIDER_ADMIN) > -1)\n                    || (this.authService.getRoles().indexOf(UserRoles.SERVICE_PROVIDER_ADMIN_CLONE) > -1)) {\n                    this.router\n                        .navigate([\"/service-provider-admin/clinical-facility-management\"])\n                        .then();\n                }\n                else if (this.authService.getRoles().indexOf(UserRoles.CLINICAL_FACILITY_ADMIN) >\n                    -1 ||\n                    this.authService.getRoles().indexOf(UserRoles.CLINICAL_FACILITY_ADMIN_CLONE) >\n                        -1 ||\n                    this.authService.getRoles().indexOf(UserRoles.SUPERVISORY_CLINICIAN) >\n                        -1 ||\n                    this.authService.getRoles().indexOf(UserRoles.GENERAL_CLINICIAN) > -1 ||\n                    this.authService.getRoles().indexOf(UserRoles.PHYSICIAN) > -1) {\n                    this.router.navigate([\"/summary\"]).then();\n                }\n            }\n            resolve(granted);\n        });\n        // if (!this.authenticated) {\n        //     await this.keycloak.login({\n        //         redirectUri: window.location.origin + state.url,\n        //     });\n        // }\n        //\n        // return this.authenticated;\n    }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService), i0.ɵɵinject(i3.AuthenticationService)); };\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}