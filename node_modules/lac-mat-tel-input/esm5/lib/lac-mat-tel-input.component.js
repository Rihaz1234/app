import { __decorate, __metadata, __param } from "tslib";
import { Component, HostBinding, Input, Optional, Self, ElementRef, ViewChild, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { MatInput } from '@angular/material/input';
import { Subject } from 'rxjs';
import { NgControl } from '@angular/forms';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { getExampleNumber, parsePhoneNumberFromString, AsYouType, getCountryCallingCode } from 'libphonenumber-js';
import { Examples } from './data/country-code';
var LacMatTelInputComponent = /** @class */ (function () {
    function LacMatTelInputComponent(ngControl, fm, elRef, changeDetector) {
        var _this = this;
        this.ngControl = ngControl;
        this.fm = fm;
        this.elRef = elRef;
        this.changeDetector = changeDetector;
        this.blur = new EventEmitter();
        this.PhoneNumberMaxDigits = 20;
        this.maxInputLength = this.PhoneNumberMaxDigits;
        //Subject to notify when country needs to be update from input
        //Se paste condition in onInputChanged
        this.countryChange = new Subject();
        //Mat Form Field implementation - BEGIN
        this.stateChanges = new Subject();
        this.id = "lac-mat-tel-input-" + LacMatTelInputComponent_1.nextId++;
        //ngControl: NgControl; set with Dependency Injection
        this.focused = false;
        //adds a required indicator to the label/placeholder
        this._required = false;
        this.inputDisabled = false;
        this.controlType = 'mat-tel';
        this.describedBy = '';
        this.onTouched = function () {
        };
        this.propagateChange = function (_) {
        };
        //ControlValueAccessor - END
        this._internationalFormat = false;
        if (this.ngControl != null) {
            // Setting the value accessor directly (instead of using
            // the providers) to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        fm.monitor(elRef.nativeElement, true).subscribe(function (origin) {
            _this.focused = !!origin;
            _this.stateChanges.next();
        });
    }
    LacMatTelInputComponent_1 = LacMatTelInputComponent;
    Object.defineProperty(LacMatTelInputComponent.prototype, "value", {
        set: function (v) {
            this._value = v ? "+" + getCountryCallingCode(this.selectedCountry) + " " + v : v;
            if (this.internationalFormat && this._value) {
                var phoneNumber = parsePhoneNumberFromString(this._value);
                if (phoneNumber && phoneNumber.isValid()) {
                    this._value = phoneNumber.formatInternational();
                }
            }
            this.propagateChange(this._value);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(LacMatTelInputComponent.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (val) {
            this._placeholder = val;
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(LacMatTelInputComponent.prototype, "empty", {
        get: function () {
            return !this.phone;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(LacMatTelInputComponent.prototype, "shouldLabelFloat", {
        //shouldLabelFloat: boolean;
        get: function () {
            return this.focused || !this.empty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LacMatTelInputComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (req) {
            this._required = coerceBooleanProperty(req);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LacMatTelInputComponent.prototype, "disabled", {
        get: function () { return this.inputDisabled || this.ngControl.disabled; },
        set: function (value) {
            this.inputDisabled = coerceBooleanProperty(value);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LacMatTelInputComponent.prototype, "errorState", {
        get: function () {
            return this.ngControl && this.ngControl.errors !== null && !!this.ngControl.touched;
        },
        enumerable: true,
        configurable: true
    });
    LacMatTelInputComponent.prototype.setDescribedByIds = function (ids) {
        this.describedBy = ids.join(' ');
    };
    LacMatTelInputComponent.prototype.onContainerClick = function (event) {
        if (!this.disabled) {
            this.onTouched();
        }
    };
    //Mat Form Field implementation - END
    //ControlValueAccessor - BEGIN
    LacMatTelInputComponent.prototype.writeValue = function (value) {
        this.onInputChanged(value);
    };
    LacMatTelInputComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    LacMatTelInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    Object.defineProperty(LacMatTelInputComponent.prototype, "internationalFormat", {
        get: function () {
            return this._internationalFormat;
        },
        set: function (format) {
            this._internationalFormat = coerceBooleanProperty(format);
            this.onInputChanged(this.phone);
        },
        enumerable: true,
        configurable: true
    });
    //lifecycle
    LacMatTelInputComponent.prototype.ngOnInit = function () {
    };
    LacMatTelInputComponent.prototype.ngOnDestroy = function () {
        this.fm.stopMonitoring(this.elRef.nativeElement);
        this.countryChange.complete();
        this.stateChanges.complete();
    };
    LacMatTelInputComponent.prototype.onCountrySelected = function (code, noPhoneReset) {
        var _this = this;
        var hasCountryChanged = this.selectedCountry && this.selectedCountry != code;
        this.selectedCountry = code;
        var example = getExampleNumber(code, Examples).formatNational();
        var numbersOnly = example.replace(/[^\d]/g, '');
        var maxExample = numbersOnly + '9999999999';
        this.maxInputLength = this.PhoneNumberMaxDigits;
        //find out the maximum (formatted) size a valid number for the country can have
        for (var i = maxExample.length; i >= 0; i--) {
            var test = maxExample.substring(0, i);
            var testPhone = parsePhoneNumberFromString(test, code);
            if (testPhone && testPhone.isValid()) {
                var maxInput = new AsYouType(code).input(test);
                this.maxInputLength = maxInput.length;
                this.placeholder = maxInput; //TODO set placeholder optionally
                break;
            }
        }
        //when new country is selected reset phone if phone reset was not disabled 
        if (hasCountryChanged && !noPhoneReset) {
            this.phone = '';
            this.value = this.phone;
            //focus on input
            if (this.phoneInput) {
                setTimeout(function () { return _this.phoneInput.focus(); });
            }
        }
    };
    LacMatTelInputComponent.prototype.onInputChanged = function (e) {
        var _this = this;
        if (!e) {
            e = '';
        }
        this.phone = e;
        if (e.startsWith('+')) { //handles pasting of a complete international number
            try {
                var pastedNumber_1 = parsePhoneNumberFromString(e);
                if (pastedNumber_1 && pastedNumber_1.country) {
                    var code = pastedNumber_1.country;
                    this.onCountrySelected(code, true);
                    this.countryChange.next(code);
                    setTimeout(function () {
                        _this.phone = pastedNumber_1.formatNational();
                        _this.value = _this.phone;
                    });
                    return;
                }
            }
            catch (_a) {
            }
        }
        var numbersOnly = e.replace(/[^\d]/g, '');
        setTimeout(function () {
            var formatted = new AsYouType(_this.selectedCountry).input(numbersOnly);
            //if the formatted output equals what we already have then the user is trying to delete a symbol inserted by
            //the formatted version
            _this.phone = formatted.substr(0, formatted.length - 1) === _this.phone ? numbersOnly : formatted;
            _this.value = _this.phone;
        }, 0);
    };
    LacMatTelInputComponent.prototype.onInputKeyPress = function (event) {
        var allowedChars = /[0-9\+\-\ ]/;
        var allowedCtrlChars = /[axcv]/; // Allows copy-pasting
        var allowedOtherKeys = [
            'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',
            'Home', 'End', 'Insert', 'Delete', 'Backspace'
        ];
        if (!allowedChars.test(event.key)
            && !(event.ctrlKey && allowedCtrlChars.test(event.key))
            && !(allowedOtherKeys.includes(event.key))) {
            event.preventDefault();
        }
    };
    var LacMatTelInputComponent_1;
    //the id of an element to associate labels and hints with.
    LacMatTelInputComponent.nextId = 0;
    LacMatTelInputComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: FocusMonitor },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], LacMatTelInputComponent.prototype, "blur", void 0);
    __decorate([
        ViewChild('phoneInput', { static: true }),
        __metadata("design:type", MatInput)
    ], LacMatTelInputComponent.prototype, "phoneInput", void 0);
    __decorate([
        HostBinding(),
        __metadata("design:type", String)
    ], LacMatTelInputComponent.prototype, "id", void 0);
    __decorate([
        HostBinding('class.floating'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], LacMatTelInputComponent.prototype, "shouldLabelFloat", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], LacMatTelInputComponent.prototype, "required", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], LacMatTelInputComponent.prototype, "disabled", null);
    __decorate([
        HostBinding('attr.aria-describedby'),
        __metadata("design:type", Object)
    ], LacMatTelInputComponent.prototype, "describedBy", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], LacMatTelInputComponent.prototype, "internationalFormat", null);
    LacMatTelInputComponent = LacMatTelInputComponent_1 = __decorate([
        Component({
            selector: 'lac-mat-tel-input',
            template: "<input type=\"text\" matInput #phoneInput=\"matInput\"\n  [ngModel]=\"phone\"\n  (blur)=\"blur.emit($event)\"\n  (keypress)=\"onInputKeyPress($event)\"\n  (ngModelChange)=\"onInputChanged($event)\"\n  [disabled]=\"disabled\"\n  [maxlength]=\"!phone ? PhoneNumberMaxDigits : maxInputLength\"\n  [placeholder]=\"placeholder\"  />\n",
            providers: [{ provide: MatFormFieldControl, useExisting: LacMatTelInputComponent_1 }],
            styles: [""]
        }),
        __param(0, Optional()), __param(0, Self()),
        __metadata("design:paramtypes", [NgControl,
            FocusMonitor,
            ElementRef,
            ChangeDetectorRef])
    ], LacMatTelInputComponent);
    return LacMatTelInputComponent;
}());
export { LacMatTelInputComponent };
//# sourceMappingURL=data:application/json;base64,