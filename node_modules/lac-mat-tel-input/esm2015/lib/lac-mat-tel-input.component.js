var LacMatTelInputComponent_1;
import { __decorate, __metadata, __param } from "tslib";
import { Component, HostBinding, Input, Optional, Self, ElementRef, ViewChild, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { MatInput } from '@angular/material/input';
import { Subject } from 'rxjs';
import { NgControl } from '@angular/forms';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { getExampleNumber, parsePhoneNumberFromString, AsYouType, getCountryCallingCode } from 'libphonenumber-js';
import { Examples } from './data/country-code';
let LacMatTelInputComponent = LacMatTelInputComponent_1 = class LacMatTelInputComponent {
    constructor(ngControl, fm, elRef, changeDetector) {
        this.ngControl = ngControl;
        this.fm = fm;
        this.elRef = elRef;
        this.changeDetector = changeDetector;
        this.blur = new EventEmitter();
        this.PhoneNumberMaxDigits = 20;
        this.maxInputLength = this.PhoneNumberMaxDigits;
        //Subject to notify when country needs to be update from input
        //Se paste condition in onInputChanged
        this.countryChange = new Subject();
        //Mat Form Field implementation - BEGIN
        this.stateChanges = new Subject();
        this.id = `lac-mat-tel-input-${LacMatTelInputComponent_1.nextId++}`;
        //ngControl: NgControl; set with Dependency Injection
        this.focused = false;
        //adds a required indicator to the label/placeholder
        this._required = false;
        this.inputDisabled = false;
        this.controlType = 'mat-tel';
        this.describedBy = '';
        this.onTouched = () => {
        };
        this.propagateChange = (_) => {
        };
        //ControlValueAccessor - END
        this._internationalFormat = false;
        if (this.ngControl != null) {
            // Setting the value accessor directly (instead of using
            // the providers) to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        fm.monitor(elRef.nativeElement, true).subscribe(origin => {
            this.focused = !!origin;
            this.stateChanges.next();
        });
    }
    set value(v) {
        this._value = v ? `+${getCountryCallingCode(this.selectedCountry)} ${v}` : v;
        if (this.internationalFormat && this._value) {
            let phoneNumber = parsePhoneNumberFromString(this._value);
            if (phoneNumber && phoneNumber.isValid()) {
                this._value = phoneNumber.formatInternational();
            }
        }
        this.propagateChange(this._value);
        this.stateChanges.next();
    }
    ;
    get placeholder() {
        return this._placeholder;
    }
    ;
    set placeholder(val) {
        this._placeholder = val;
        this.stateChanges.next();
    }
    get empty() {
        return !this.phone;
    }
    ;
    //shouldLabelFloat: boolean;
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    get required() {
        return this._required;
    }
    set required(req) {
        this._required = coerceBooleanProperty(req);
        this.stateChanges.next();
    }
    get disabled() { return this.inputDisabled || this.ngControl.disabled; }
    set disabled(value) {
        this.inputDisabled = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    get errorState() {
        return this.ngControl && this.ngControl.errors !== null && !!this.ngControl.touched;
    }
    setDescribedByIds(ids) {
        this.describedBy = ids.join(' ');
    }
    onContainerClick(event) {
        if (!this.disabled) {
            this.onTouched();
        }
    }
    //Mat Form Field implementation - END
    //ControlValueAccessor - BEGIN
    writeValue(value) {
        this.onInputChanged(value);
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    get internationalFormat() {
        return this._internationalFormat;
    }
    set internationalFormat(format) {
        this._internationalFormat = coerceBooleanProperty(format);
        this.onInputChanged(this.phone);
    }
    //lifecycle
    ngOnInit() {
    }
    ngOnDestroy() {
        this.fm.stopMonitoring(this.elRef.nativeElement);
        this.countryChange.complete();
        this.stateChanges.complete();
    }
    onCountrySelected(code, noPhoneReset) {
        let hasCountryChanged = this.selectedCountry && this.selectedCountry != code;
        this.selectedCountry = code;
        let example = getExampleNumber(code, Examples).formatNational();
        let numbersOnly = example.replace(/[^\d]/g, '');
        let maxExample = numbersOnly + '9999999999';
        this.maxInputLength = this.PhoneNumberMaxDigits;
        //find out the maximum (formatted) size a valid number for the country can have
        for (let i = maxExample.length; i >= 0; i--) {
            let test = maxExample.substring(0, i);
            let testPhone = parsePhoneNumberFromString(test, code);
            if (testPhone && testPhone.isValid()) {
                let maxInput = new AsYouType(code).input(test);
                this.maxInputLength = maxInput.length;
                this.placeholder = maxInput; //TODO set placeholder optionally
                break;
            }
        }
        //when new country is selected reset phone if phone reset was not disabled 
        if (hasCountryChanged && !noPhoneReset) {
            this.phone = '';
            this.value = this.phone;
            //focus on input
            if (this.phoneInput) {
                setTimeout(() => this.phoneInput.focus());
            }
        }
    }
    onInputChanged(e) {
        if (!e) {
            e = '';
        }
        this.phone = e;
        if (e.startsWith('+')) { //handles pasting of a complete international number
            try {
                let pastedNumber = parsePhoneNumberFromString(e);
                if (pastedNumber && pastedNumber.country) {
                    let code = pastedNumber.country;
                    this.onCountrySelected(code, true);
                    this.countryChange.next(code);
                    setTimeout(() => {
                        this.phone = pastedNumber.formatNational();
                        this.value = this.phone;
                    });
                    return;
                }
            }
            catch (_a) {
            }
        }
        let numbersOnly = e.replace(/[^\d]/g, '');
        setTimeout(() => {
            let formatted = new AsYouType(this.selectedCountry).input(numbersOnly);
            //if the formatted output equals what we already have then the user is trying to delete a symbol inserted by
            //the formatted version
            this.phone = formatted.substr(0, formatted.length - 1) === this.phone ? numbersOnly : formatted;
            this.value = this.phone;
        }, 0);
    }
    onInputKeyPress(event) {
        const allowedChars = /[0-9\+\-\ ]/;
        const allowedCtrlChars = /[axcv]/; // Allows copy-pasting
        const allowedOtherKeys = [
            'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',
            'Home', 'End', 'Insert', 'Delete', 'Backspace'
        ];
        if (!allowedChars.test(event.key)
            && !(event.ctrlKey && allowedCtrlChars.test(event.key))
            && !(allowedOtherKeys.includes(event.key))) {
            event.preventDefault();
        }
    }
};
//the id of an element to associate labels and hints with.
LacMatTelInputComponent.nextId = 0;
LacMatTelInputComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: FocusMonitor },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], LacMatTelInputComponent.prototype, "blur", void 0);
__decorate([
    ViewChild('phoneInput', { static: true }),
    __metadata("design:type", MatInput)
], LacMatTelInputComponent.prototype, "phoneInput", void 0);
__decorate([
    HostBinding(),
    __metadata("design:type", String)
], LacMatTelInputComponent.prototype, "id", void 0);
__decorate([
    HostBinding('class.floating'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], LacMatTelInputComponent.prototype, "shouldLabelFloat", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], LacMatTelInputComponent.prototype, "required", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], LacMatTelInputComponent.prototype, "disabled", null);
__decorate([
    HostBinding('attr.aria-describedby'),
    __metadata("design:type", Object)
], LacMatTelInputComponent.prototype, "describedBy", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], LacMatTelInputComponent.prototype, "internationalFormat", null);
LacMatTelInputComponent = LacMatTelInputComponent_1 = __decorate([
    Component({
        selector: 'lac-mat-tel-input',
        template: "<input type=\"text\" matInput #phoneInput=\"matInput\"\n  [ngModel]=\"phone\"\n  (blur)=\"blur.emit($event)\"\n  (keypress)=\"onInputKeyPress($event)\"\n  (ngModelChange)=\"onInputChanged($event)\"\n  [disabled]=\"disabled\"\n  [maxlength]=\"!phone ? PhoneNumberMaxDigits : maxInputLength\"\n  [placeholder]=\"placeholder\"  />\n",
        providers: [{ provide: MatFormFieldControl, useExisting: LacMatTelInputComponent_1 }],
        styles: [""]
    }),
    __param(0, Optional()), __param(0, Self()),
    __metadata("design:paramtypes", [NgControl,
        FocusMonitor,
        ElementRef,
        ChangeDetectorRef])
], LacMatTelInputComponent);
export { LacMatTelInputComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFjLW1hdC10ZWwtaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbGFjLW1hdC10ZWwtaW5wdXQvIiwic291cmNlcyI6WyJsaWIvbGFjLW1hdC10ZWwtaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlJLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLDBCQUEwQixFQUFFLFNBQVMsRUFBZSxxQkFBcUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hJLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVEvQyxJQUFhLHVCQUF1QiwrQkFBcEMsTUFBYSx1QkFBdUI7SUFzSWxDLFlBQzZCLFNBQW9CLEVBQ3ZDLEVBQWdCLEVBQ2hCLEtBQThCLEVBQzlCLGNBQWlDO1FBSGQsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUN2QyxPQUFFLEdBQUYsRUFBRSxDQUFjO1FBQ2hCLFVBQUssR0FBTCxLQUFLLENBQXlCO1FBQzlCLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQXhJM0MsU0FBSSxHQUFzQixJQUFJ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QSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsSUFBSSxFQUFFLENBQUE7cUNBQW1CLFNBQVM7UUFDbkMsWUFBWTtRQUNULFVBQVU7UUFDRCxpQkFBaUI7R0ExSWhDLHVCQUF1QixDQTRQbkM7U0E1UFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIE9wdGlvbmFsLCBTZWxmLCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0Rm9ybUZpZWxkQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0SW5wdXQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pbnB1dCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgZ2V0RXhhbXBsZU51bWJlciwgcGFyc2VQaG9uZU51bWJlckZyb21TdHJpbmcsIEFzWW91VHlwZSwgQ291bnRyeUNvZGUsIGdldENvdW50cnlDYWxsaW5nQ29kZSB9IGZyb20gJ2xpYnBob25lbnVtYmVyLWpzJztcbmltcG9ydCB7IEV4YW1wbGVzIH0gZnJvbSAnLi9kYXRhL2NvdW50cnktY29kZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xhYy1tYXQtdGVsLWlucHV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xhYy1tYXQtdGVsLWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGFjLW1hdC10ZWwtaW5wdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE1hdEZvcm1GaWVsZENvbnRyb2wsIHVzZUV4aXN0aW5nOiBMYWNNYXRUZWxJbnB1dENvbXBvbmVudH1dXG59KVxuZXhwb3J0IGNsYXNzIExhY01hdFRlbElucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE1hdEZvcm1GaWVsZENvbnRyb2w8c3RyaW5nPiB7XG4gIEBPdXRwdXQoKVxuICBibHVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIFBob25lTnVtYmVyTWF4RGlnaXRzOiBudW1iZXIgPSAyMDtcblxuICBwaG9uZTogc3RyaW5nO1xuICBAVmlld0NoaWxkKCdwaG9uZUlucHV0JywgeyBzdGF0aWM6IHRydWUgfSkgcGhvbmVJbnB1dDogTWF0SW5wdXQ7XG5cbiAgbWF4SW5wdXRMZW5ndGg6IG51bWJlciA9IHRoaXMuUGhvbmVOdW1iZXJNYXhEaWdpdHM7XG5cbiAgLy9TdWJqZWN0IHRvIG5vdGlmeSB3aGVuIGNvdW50cnkgbmVlZHMgdG8gYmUgdXBkYXRlIGZyb20gaW5wdXRcbiAgLy9TZSBwYXN0ZSBjb25kaXRpb24gaW4gb25JbnB1dENoYW5nZWRcbiAgY291bnRyeUNoYW5nZSA9IG5ldyBTdWJqZWN0PENvdW50cnlDb2RlPigpO1xuICBcbiAgcHJpdmF0ZSBzZWxlY3RlZENvdW50cnk6IENvdW50cnlDb2RlO1xuXG4gIC8vTWF0IEZvcm0gRmllbGQgaW1wbGVtZW50YXRpb24gLSBCRUdJTlxuICBzdGF0ZUNoYW5nZXMgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8vdGhlIHZhbHVlIG9mIHRoZSBGb3JtRmllbGRDb250cm9sXG4gIF92YWx1ZTogc3RyaW5nO1xuICBzZXQgdmFsdWUodjogc3RyaW5nIHwgbnVsbCkgey8vd2hlbmV2ZXIgdmFsdWUgY2hhbmdlcyAtPiB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7IHNvIGZvcm0tZmllbGQgcnVucyBjaGFuZ2UgZGV0ZWN0aW9uXG4gICAgdGhpcy5fdmFsdWUgPSAgdiA/IGArJHtnZXRDb3VudHJ5Q2FsbGluZ0NvZGUodGhpcy5zZWxlY3RlZENvdW50cnkpfSAke3Z9YCA6IHY7XG4gICAgaWYgKHRoaXMuaW50ZXJuYXRpb25hbEZvcm1hdCAmJiB0aGlzLl92YWx1ZSkge1xuICAgICAgbGV0IHBob25lTnVtYmVyID0gcGFyc2VQaG9uZU51bWJlckZyb21TdHJpbmcodGhpcy5fdmFsdWUpO1xuXG4gICAgICBpZiAocGhvbmVOdW1iZXIgJiYgcGhvbmVOdW1iZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gcGhvbmVOdW1iZXIuZm9ybWF0SW50ZXJuYXRpb25hbCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSh0aGlzLl92YWx1ZSk7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICB9O1xuXG4gIC8vdGhlIGlkIG9mIGFuIGVsZW1lbnQgdG8gYXNzb2NpYXRlIGxhYmVscyBhbmQgaGludHMgd2l0aC5cbiAgc3RhdGljIG5leHRJZCA9IDA7XG4gIEBIb3N0QmluZGluZygpIGlkOiBzdHJpbmcgPSBgbGFjLW1hdC10ZWwtaW5wdXQtJHtMYWNNYXRUZWxJbnB1dENvbXBvbmVudC5uZXh0SWQrK31gO1xuXG4gIC8vcGxhY2Vob2xkZXJcbiAgcHJpdmF0ZSBfcGxhY2Vob2xkZXI6IHN0cmluZztcblxuICBnZXQgcGxhY2Vob2xkZXIoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcGxhY2Vob2xkZXI7XG4gIH07XG4gIHNldCBwbGFjZWhvbGRlcih2YWwpIHtcbiAgICB0aGlzLl9wbGFjZWhvbGRlciA9IHZhbDtcbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gIH1cblxuICAvL25nQ29udHJvbDogTmdDb250cm9sOyBzZXQgd2l0aCBEZXBlbmRlbmN5IEluamVjdGlvblxuXG4gIGZvY3VzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBnZXQgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnBob25lO1xuICB9O1xuXG4gIC8vc2hvdWxkTGFiZWxGbG9hdDogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mbG9hdGluZycpXG4gIGdldCBzaG91bGRMYWJlbEZsb2F0KCkge1xuICAgIHJldHVybiB0aGlzLmZvY3VzZWQgfHwgIXRoaXMuZW1wdHk7XG4gIH1cblxuICAvL2FkZHMgYSByZXF1aXJlZCBpbmRpY2F0b3IgdG8gdGhlIGxhYmVsL3BsYWNlaG9sZGVyXG4gIHByaXZhdGUgX3JlcXVpcmVkID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIGdldCByZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7XG4gIH1cbiAgc2V0IHJlcXVpcmVkKHJlcSkge1xuICAgIHRoaXMuX3JlcXVpcmVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHJlcSk7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbnB1dERpc2FibGVkID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuaW5wdXREaXNhYmxlZCB8fCB0aGlzLm5nQ29udHJvbC5kaXNhYmxlZDsgfVxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlucHV0RGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBlcnJvclN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5lcnJvcnMgIT09IG51bGwgJiYgISF0aGlzLm5nQ29udHJvbC50b3VjaGVkO1xuICB9XG5cbiAgY29udHJvbFR5cGU/OiBzdHJpbmcgPSAnbWF0LXRlbCc7XG5cbiAgYXV0b2ZpbGxlZD86IGJvb2xlYW47XG5cblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1kZXNjcmliZWRieScpIGRlc2NyaWJlZEJ5ID0gJyc7XG4gIHNldERlc2NyaWJlZEJ5SWRzKGlkczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICB0aGlzLmRlc2NyaWJlZEJ5ID0gaWRzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIG9uQ29udGFpbmVyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgfVxuICB9XG4gIC8vTWF0IEZvcm0gRmllbGQgaW1wbGVtZW50YXRpb24gLSBFTkRcblxuICAvL0NvbnRyb2xWYWx1ZUFjY2Vzc29yIC0gQkVHSU5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5vbklucHV0Q2hhbmdlZCh2YWx1ZSk7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBvblRvdWNoZWQgPSAoKSA9PiB7XG4gIH1cblxuICBwcm9wYWdhdGVDaGFuZ2UgPSAoXzogYW55KSA9PiB7XG4gIH1cbiAgLy9Db250cm9sVmFsdWVBY2Nlc3NvciAtIEVORFxuXG4gIHByaXZhdGUgX2ludGVybmF0aW9uYWxGb3JtYXQgPSBmYWxzZTtcbiAgQElucHV0KClcbiAgZ2V0IGludGVybmF0aW9uYWxGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVybmF0aW9uYWxGb3JtYXQ7XG4gIH1cbiAgc2V0IGludGVybmF0aW9uYWxGb3JtYXQoZm9ybWF0KSB7XG4gICAgdGhpcy5faW50ZXJuYXRpb25hbEZvcm1hdCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eShmb3JtYXQpO1xuICAgIHRoaXMub25JbnB1dENoYW5nZWQodGhpcy5waG9uZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBAU2VsZigpIHB1YmxpYyBuZ0NvbnRyb2w6IE5nQ29udHJvbCxcbiAgICBwcml2YXRlIGZtOiBGb2N1c01vbml0b3IsXG4gICAgcHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7IFxuICAgICBpZiAodGhpcy5uZ0NvbnRyb2wgIT0gbnVsbCkge1xuICAgICAgLy8gU2V0dGluZyB0aGUgdmFsdWUgYWNjZXNzb3IgZGlyZWN0bHkgKGluc3RlYWQgb2YgdXNpbmdcbiAgICAgIC8vIHRoZSBwcm92aWRlcnMpIHRvIGF2b2lkIHJ1bm5pbmcgaW50byBhIGNpcmN1bGFyIGltcG9ydC5cbiAgICAgIHRoaXMubmdDb250cm9sLnZhbHVlQWNjZXNzb3IgPSB0aGlzO1xuICAgIH1cblxuICAgIGZtLm1vbml0b3IoZWxSZWYubmF0aXZlRWxlbWVudCwgdHJ1ZSkuc3Vic2NyaWJlKG9yaWdpbiA9PiB7XG4gICAgICB0aGlzLmZvY3VzZWQgPSAhIW9yaWdpbjtcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vbGlmZWN5Y2xlXG4gIG5nT25Jbml0KCkge1xuICAgIFxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5mbS5zdG9wTW9uaXRvcmluZyh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIHRoaXMuY291bnRyeUNoYW5nZS5jb21wbGV0ZSgpO1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBvbkNvdW50cnlTZWxlY3RlZChjb2RlOiBDb3VudHJ5Q29kZSwgbm9QaG9uZVJlc2V0PzogYm9vbGVhbikge1xuICAgIGxldCBoYXNDb3VudHJ5Q2hhbmdlZCA9IHRoaXMuc2VsZWN0ZWRDb3VudHJ5ICYmIHRoaXMuc2VsZWN0ZWRDb3VudHJ5ICE9IGNvZGU7XG4gICAgdGhpcy5zZWxlY3RlZENvdW50cnkgPSBjb2RlO1xuXG4gICAgbGV0IGV4YW1wbGUgPSBnZXRFeGFtcGxlTnVtYmVyKGNvZGUsIEV4YW1wbGVzKS5mb3JtYXROYXRpb25hbCgpO1xuICAgIGxldCBudW1iZXJzT25seSA9IGV4YW1wbGUucmVwbGFjZSgvW15cXGRdL2csICcnKTtcbiAgICBsZXQgbWF4RXhhbXBsZSA9IG51bWJlcnNPbmx5ICsgJzk5OTk5OTk5OTknO1xuXG4gICAgdGhpcy5tYXhJbnB1dExlbmd0aCA9IHRoaXMuUGhvbmVOdW1iZXJNYXhEaWdpdHM7XG5cbiAgICAvL2ZpbmQgb3V0IHRoZSBtYXhpbXVtIChmb3JtYXR0ZWQpIHNpemUgYSB2YWxpZCBudW1iZXIgZm9yIHRoZSBjb3VudHJ5IGNhbiBoYXZlXG4gICAgZm9yIChsZXQgaSA9IG1heEV4YW1wbGUubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IHRlc3QgPSBtYXhFeGFtcGxlLnN1YnN0cmluZygwLCBpKTtcbiAgICAgIGxldCB0ZXN0UGhvbmUgPSBwYXJzZVBob25lTnVtYmVyRnJvbVN0cmluZyh0ZXN0LCBjb2RlKTtcblxuICAgICAgaWYgKHRlc3RQaG9uZSAmJiB0ZXN0UGhvbmUuaXNWYWxpZCgpKSB7XG4gICAgICAgIGxldCBtYXhJbnB1dCA9IG5ldyBBc1lvdVR5cGUoY29kZSkuaW5wdXQodGVzdCk7XG4gICAgICAgIHRoaXMubWF4SW5wdXRMZW5ndGggPSBtYXhJbnB1dC5sZW5ndGg7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBtYXhJbnB1dDsvL1RPRE8gc2V0IHBsYWNlaG9sZGVyIG9wdGlvbmFsbHlcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy93aGVuIG5ldyBjb3VudHJ5IGlzIHNlbGVjdGVkIHJlc2V0IHBob25lIGlmIHBob25lIHJlc2V0IHdhcyBub3QgZGlzYWJsZWQgXG4gICAgaWYgKGhhc0NvdW50cnlDaGFuZ2VkICYmICFub1Bob25lUmVzZXQpIHtcbiAgICAgIHRoaXMucGhvbmUgPSAnJztcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnBob25lO1xuXG4gICAgICAvL2ZvY3VzIG9uIGlucHV0XG4gICAgICBpZiAodGhpcy5waG9uZUlucHV0KSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5waG9uZUlucHV0LmZvY3VzKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uSW5wdXRDaGFuZ2VkKGU6IHN0cmluZykge1xuICAgIGlmICghZSkge1xuICAgICAgZSA9ICcnO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLnBob25lID0gZTtcblxuICAgIGlmIChlLnN0YXJ0c1dpdGgoJysnKSkgey8vaGFuZGxlcyBwYXN0aW5nIG9mIGEgY29tcGxldGUgaW50ZXJuYXRpb25hbCBudW1iZXJcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBwYXN0ZWROdW1iZXIgID0gcGFyc2VQaG9uZU51bWJlckZyb21TdHJpbmcoZSk7XG5cbiAgICAgICAgaWYgKHBhc3RlZE51bWJlciAmJiBwYXN0ZWROdW1iZXIuY291bnRyeSkge1xuICAgICAgICAgIGxldCBjb2RlID0gcGFzdGVkTnVtYmVyLmNvdW50cnk7XG4gICAgICAgICAgXG4gICAgICAgICAgdGhpcy5vbkNvdW50cnlTZWxlY3RlZChjb2RlLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuY291bnRyeUNoYW5nZS5uZXh0KGNvZGUpO1xuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBob25lID0gcGFzdGVkTnVtYmVyLmZvcm1hdE5hdGlvbmFsKCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5waG9uZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2gge1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBudW1iZXJzT25seSA9IGUucmVwbGFjZSgvW15cXGRdL2csICcnKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbGV0IGZvcm1hdHRlZCA9IG5ldyBBc1lvdVR5cGUodGhpcy5zZWxlY3RlZENvdW50cnkpLmlucHV0KG51bWJlcnNPbmx5KTtcbiAgICAgIC8vaWYgdGhlIGZvcm1hdHRlZCBvdXRwdXQgZXF1YWxzIHdoYXQgd2UgYWxyZWFkeSBoYXZlIHRoZW4gdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIGRlbGV0ZSBhIHN5bWJvbCBpbnNlcnRlZCBieVxuICAgICAgLy90aGUgZm9ybWF0dGVkIHZlcnNpb25cbiAgICAgIHRoaXMucGhvbmUgPSBmb3JtYXR0ZWQuc3Vic3RyKDAsIGZvcm1hdHRlZC5sZW5ndGggLSAxKSA9PT0gdGhpcy5waG9uZSA/IG51bWJlcnNPbmx5IDogZm9ybWF0dGVkO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMucGhvbmU7XG4gICAgfSwgMCk7XG4gIH1cblxuICBwdWJsaWMgb25JbnB1dEtleVByZXNzKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG5cdFx0Y29uc3QgYWxsb3dlZENoYXJzID0gL1swLTlcXCtcXC1cXCBdLztcblx0XHRjb25zdCBhbGxvd2VkQ3RybENoYXJzID0gL1theGN2XS87IC8vIEFsbG93cyBjb3B5LXBhc3Rpbmdcblx0XHRjb25zdCBhbGxvd2VkT3RoZXJLZXlzID0gW1xuXHRcdFx0J0Fycm93TGVmdCcsICdBcnJvd1VwJywgJ0Fycm93UmlnaHQnLCAnQXJyb3dEb3duJyxcblx0XHRcdCdIb21lJywgJ0VuZCcsICdJbnNlcnQnLCAnRGVsZXRlJywgJ0JhY2tzcGFjZSdcblx0XHRdO1xuXG5cdFx0aWYgKCFhbGxvd2VkQ2hhcnMudGVzdChldmVudC5rZXkpXG5cdFx0XHQmJiAhKGV2ZW50LmN0cmxLZXkgJiYgYWxsb3dlZEN0cmxDaGFycy50ZXN0KGV2ZW50LmtleSkpXG5cdFx0XHQmJiAhKGFsbG93ZWRPdGhlcktleXMuaW5jbHVkZXMoZXZlbnQua2V5KSkpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXHR9XG5cbn1cbiJdfQ==